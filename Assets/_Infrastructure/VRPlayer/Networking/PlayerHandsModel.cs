using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using Normal.Realtime;
using Normal.Realtime.Serialization;

[RealtimeModel]
public partial class PlayerHandsModel
{
    [RealtimeProperty(1, true, true)]
    float _thumb_bend_offset;

    [RealtimeProperty(2, true, true)]
    float _index_bend_offset;

    [RealtimeProperty(3, true, true)]
    float _middle_bend_offset;

    [RealtimeProperty(4, true, true)]
    float _ring_bend_offset;

    [RealtimeProperty(5, true, true)]
    float _pinky_bend_offset;
}

/* ----- Begin Normal Autogenerated Code ----- */
public partial class PlayerHandsModel : RealtimeModel {
    public float thumb_bend_offset {
        get {
            return _thumb_bend_offsetProperty.value;
        }
        set {
            if (_thumb_bend_offsetProperty.value == value) return;
            _thumb_bend_offsetProperty.value = value;
            InvalidateReliableLength();
            FireThumb_bend_offsetDidChange(value);
        }
    }
    
    public float index_bend_offset {
        get {
            return _index_bend_offsetProperty.value;
        }
        set {
            if (_index_bend_offsetProperty.value == value) return;
            _index_bend_offsetProperty.value = value;
            InvalidateReliableLength();
            FireIndex_bend_offsetDidChange(value);
        }
    }
    
    public float middle_bend_offset {
        get {
            return _middle_bend_offsetProperty.value;
        }
        set {
            if (_middle_bend_offsetProperty.value == value) return;
            _middle_bend_offsetProperty.value = value;
            InvalidateReliableLength();
            FireMiddle_bend_offsetDidChange(value);
        }
    }
    
    public float ring_bend_offset {
        get {
            return _ring_bend_offsetProperty.value;
        }
        set {
            if (_ring_bend_offsetProperty.value == value) return;
            _ring_bend_offsetProperty.value = value;
            InvalidateReliableLength();
            FireRing_bend_offsetDidChange(value);
        }
    }
    
    public float pinky_bend_offset {
        get {
            return _pinky_bend_offsetProperty.value;
        }
        set {
            if (_pinky_bend_offsetProperty.value == value) return;
            _pinky_bend_offsetProperty.value = value;
            InvalidateReliableLength();
            FirePinky_bend_offsetDidChange(value);
        }
    }
    
    public delegate void PropertyChangedHandler<in T>(PlayerHandsModel model, T value);
    public event PropertyChangedHandler<float> thumb_bend_offsetDidChange;
    public event PropertyChangedHandler<float> index_bend_offsetDidChange;
    public event PropertyChangedHandler<float> middle_bend_offsetDidChange;
    public event PropertyChangedHandler<float> ring_bend_offsetDidChange;
    public event PropertyChangedHandler<float> pinky_bend_offsetDidChange;
    
    public enum PropertyID : uint {
        Thumb_bend_offset = 1,
        Index_bend_offset = 2,
        Middle_bend_offset = 3,
        Ring_bend_offset = 4,
        Pinky_bend_offset = 5,
    }
    
    #region Properties
    
    private ReliableProperty<float> _thumb_bend_offsetProperty;
    
    private ReliableProperty<float> _index_bend_offsetProperty;
    
    private ReliableProperty<float> _middle_bend_offsetProperty;
    
    private ReliableProperty<float> _ring_bend_offsetProperty;
    
    private ReliableProperty<float> _pinky_bend_offsetProperty;
    
    #endregion
    
    public PlayerHandsModel() : base(null) {
        _thumb_bend_offsetProperty = new ReliableProperty<float>(1, _thumb_bend_offset);
        _index_bend_offsetProperty = new ReliableProperty<float>(2, _index_bend_offset);
        _middle_bend_offsetProperty = new ReliableProperty<float>(3, _middle_bend_offset);
        _ring_bend_offsetProperty = new ReliableProperty<float>(4, _ring_bend_offset);
        _pinky_bend_offsetProperty = new ReliableProperty<float>(5, _pinky_bend_offset);
    }
    
    protected override void OnParentReplaced(RealtimeModel previousParent, RealtimeModel currentParent) {
        _thumb_bend_offsetProperty.UnsubscribeCallback();
        _index_bend_offsetProperty.UnsubscribeCallback();
        _middle_bend_offsetProperty.UnsubscribeCallback();
        _ring_bend_offsetProperty.UnsubscribeCallback();
        _pinky_bend_offsetProperty.UnsubscribeCallback();
    }
    
    private void FireThumb_bend_offsetDidChange(float value) {
        try {
            thumb_bend_offsetDidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    private void FireIndex_bend_offsetDidChange(float value) {
        try {
            index_bend_offsetDidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    private void FireMiddle_bend_offsetDidChange(float value) {
        try {
            middle_bend_offsetDidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    private void FireRing_bend_offsetDidChange(float value) {
        try {
            ring_bend_offsetDidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    private void FirePinky_bend_offsetDidChange(float value) {
        try {
            pinky_bend_offsetDidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    protected override int WriteLength(StreamContext context) {
        var length = 0;
        length += _thumb_bend_offsetProperty.WriteLength(context);
        length += _index_bend_offsetProperty.WriteLength(context);
        length += _middle_bend_offsetProperty.WriteLength(context);
        length += _ring_bend_offsetProperty.WriteLength(context);
        length += _pinky_bend_offsetProperty.WriteLength(context);
        return length;
    }
    
    protected override void Write(WriteStream stream, StreamContext context) {
        var writes = false;
        writes |= _thumb_bend_offsetProperty.Write(stream, context);
        writes |= _index_bend_offsetProperty.Write(stream, context);
        writes |= _middle_bend_offsetProperty.Write(stream, context);
        writes |= _ring_bend_offsetProperty.Write(stream, context);
        writes |= _pinky_bend_offsetProperty.Write(stream, context);
        if (writes) InvalidateContextLength(context);
    }
    
    protected override void Read(ReadStream stream, StreamContext context) {
        var anyPropertiesChanged = false;
        while (stream.ReadNextPropertyID(out uint propertyID)) {
            var changed = false;
            switch (propertyID) {
                case (uint) PropertyID.Thumb_bend_offset: {
                    changed = _thumb_bend_offsetProperty.Read(stream, context);
                    if (changed) FireThumb_bend_offsetDidChange(thumb_bend_offset);
                    break;
                }
                case (uint) PropertyID.Index_bend_offset: {
                    changed = _index_bend_offsetProperty.Read(stream, context);
                    if (changed) FireIndex_bend_offsetDidChange(index_bend_offset);
                    break;
                }
                case (uint) PropertyID.Middle_bend_offset: {
                    changed = _middle_bend_offsetProperty.Read(stream, context);
                    if (changed) FireMiddle_bend_offsetDidChange(middle_bend_offset);
                    break;
                }
                case (uint) PropertyID.Ring_bend_offset: {
                    changed = _ring_bend_offsetProperty.Read(stream, context);
                    if (changed) FireRing_bend_offsetDidChange(ring_bend_offset);
                    break;
                }
                case (uint) PropertyID.Pinky_bend_offset: {
                    changed = _pinky_bend_offsetProperty.Read(stream, context);
                    if (changed) FirePinky_bend_offsetDidChange(pinky_bend_offset);
                    break;
                }
                default: {
                    stream.SkipProperty();
                    break;
                }
            }
            anyPropertiesChanged |= changed;
        }
        if (anyPropertiesChanged) {
            UpdateBackingFields();
        }
    }
    
    private void UpdateBackingFields() {
        _thumb_bend_offset = thumb_bend_offset;
        _index_bend_offset = index_bend_offset;
        _middle_bend_offset = middle_bend_offset;
        _ring_bend_offset = ring_bend_offset;
        _pinky_bend_offset = pinky_bend_offset;
    }
    
}
/* ----- End Normal Autogenerated Code ----- */
